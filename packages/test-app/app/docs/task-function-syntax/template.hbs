<h3>Defining Tasks with <code>task()</code></h3>

<p>
  When a task is performed, it runs the code in the async arrow task function
  you passed into <code>task()</code>. (If you're unfamiliar with async functions
  and the <code>await</code> keyword, Mozilla has a good introductory
  <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function">guide</a>).
</p>

<h4>Using the <code>await</code> keyword</h4>

<p>
  Much of the power of Tasks is unleashed once you start making
  use of the <code>await</code> keyword within async functions.
  The <code>await</code> keyword, when used with a promise, lets you
  pause execution of your task function until that promise resolves, at
  which point the task function will continue running from where it
  had paused.
</p>

<p>
  This example demonstrates how you can <code>await timeout(1000)</code>
  to pause execution for 1000 ms (one second). The <code>timeout()</code>
  helper function, which <strong>ember-concurrency</strong> provides,
  simply returns a promise that resolves after the specified number of milliseconds.
</p>

<TaskFunctionSyntax-1 />

<CodeSnippet @name="task-function-syntax-1.js" />

<p>
  When you <code>await</code> a promise, the <code>await</code> expression
  evaluates to the resolved value of the promise. In other words, you can
  set a variable equal to a yielded promise, and when the promise resolves,
  the task function will resume and the value stored into that variable will
  be the resolved value of the promise.
</p>

<TaskFunctionSyntax-3 />

<CodeSnippet @name="task-function-syntax-3.js" />

<p>
  If you <code>await</code> a promise that rejects, the task function will
  throw the rejected value (likely an exception object) from the point in
  task function where the rejecting promise was awaited. This means you can
  use <code>try {} catch(e) {} finally {}</code> blocks, just as you would
  for code that runs synchronously.
</p>

<TaskFunctionSyntax-4 />

<CodeSnippet @name="task-function-syntax-4.js" />

<h4>Classic Ember use (prior to Ember 3.10+ or non-Ember Octane)</h4>

<p>
  Please see the
  <a href="https://v221.ember-concurrency.com/docs/task-function-syntax">older guides</a>
  for how to use ember-concurrency with older versions of Ember.
</p>
